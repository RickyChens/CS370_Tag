Index: map creation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\nimport pygame\nfrom constants import *\n\npygame.init()\nscreen = pygame.display.set_mode((HEIGHT, WIDTH))\nscreen_boundaries = pygame.Rect((0, 0), (HEIGHT, WIDTH))\n\nmapping = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n           [1, 0, 1, 0, 1, 1, 1, 0, 0, 1],\n           [1, 0, 0, 0, 1, 0, 0, 0, 1, 1],\n           [1, 1, 1, 0, 1, 1, 0, 0, 0, 1],\n           [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n           [1, 1, 1, 1, 1, 0, 0, 0, 1, 1],\n           [1, 0, 0, 0, 1, 1, 1, 0, 0, 1],\n           [1, 0, 1, 0, 1, 0, 0, 0, 1, 1],\n           [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\n\n\nclass Player(pygame.sprite.Sprite):\n    def __init__(self, pos, color):\n        super().__init__()\n\n        self.image = pygame.Surface([50, 50])\n        self.image.fill(color)\n        self.image.set_colorkey((255, 100, 98))\n\n        self.rect = self.image.get_rect(center=pos)\n\n    def move(self, dx, dy):\n        # Move each axis separately. Note that this checks for collisions with obstacles.\n        if dx != 0 or dy != 0:\n            self.move_single_axis(dx, dy)\n\n    def move_single_axis(self, dx, dy):\n        # Move the rect\n        self.rect.x += dx\n        self.rect.y += dy\n\n        for r in range(len(mapping)):\n            for c in range(len(mapping[r])):\n                if mapping[r][c] == 1:\n                    obstacle_rect = pygame.Rect(c * (WIDTH // len(mapping[r])),\n                                                r * (HEIGHT // len(mapping)),\n                                                WIDTH // len(mapping[r]),\n                                                HEIGHT // len(mapping))\n\n                    if self.rect.colliderect(obstacle_rect):\n                        if dx > 0:\n                            self.rect.right = obstacle_rect.left\n                        if dx < 0:\n                            self.rect.left = obstacle_rect.right\n                        if dy > 0:\n                            self.rect.bottom = obstacle_rect.top\n                        if dy < 0:\n                            self.rect.top = obstacle_rect.bottom\n\n\nplayer = Player((350, 350), WHITE)\n\nobstacles = []\nfor r in range(len(mapping)):\n    for c in range(len(mapping[r])):\n        if mapping[r][c] == 1:\n            obstacle = Player((c * (WIDTH // len(mapping[r])) + WIDTH // (2 * len(mapping[r])),\n                               r * (HEIGHT // len(mapping)) + HEIGHT // (2 * len(mapping))),\n                              RED)\n            obstacles.append(obstacle)\n\nclock = pygame.time.Clock()\n\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    keys = pygame.key.get_pressed()\n\n    if keys[pygame.K_LEFT]:\n        player.move(-2, 0)\n    if keys[pygame.K_RIGHT]:\n        player.move(2, 0)\n    if keys[pygame.K_UP]:\n        player.move(0, -2)\n    if keys[pygame.K_DOWN]:\n        player.move(0, 2)\n\n    # Keeps player within window boundaries\n    player.rect.clamp_ip(screen_boundaries)\n\n    screen.fill(BLACK)\n    for r in range(len(mapping)):\n        for c in range(len(mapping[r])):\n            if mapping[r][c] == 1:\n                rect_x = c * (WIDTH // len(mapping[r]))\n                rect_y = r * (HEIGHT // len(mapping))\n                rect_width = WIDTH // len(mapping[r])\n                rect_height = HEIGHT // len(mapping)\n                pygame.draw.rect(screen, RED, pygame.Rect(rect_x, rect_y, rect_width, rect_height), 2)\n\n    for obstacle in obstacles:\n        screen.blit(obstacle.image, obstacle.rect)\n\n    screen.blit(player.image, player.rect)\n    pygame.display.flip()\n    clock.tick(60)\n\npygame.quit()\n
===================================================================
diff --git a/map creation.py b/map creation.py
--- a/map creation.py	
+++ b/map creation.py	
@@ -105,6 +105,6 @@
 
     screen.blit(player.image, player.rect)
     pygame.display.flip()
-    clock.tick(60)
+    clock.tick(500)
 
 pygame.quit()
